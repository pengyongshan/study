package com.tree.www.leetcode;

/**
 * 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
 * <p>
 * 爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。
 * 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。
 * 每次抽取都是独立的，其结果具有相同的概率。
 * <p>
 * 当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
 * <p>
 * Created by pysh on 2020-06-03.
 */
public class Leetcode837 {

    /**
     * eg：
     * 输入：N = 10, K = 1, W = 10
     * 输出：1.00000
     * 说明：爱丽丝得到一张卡，然后停止。
     *
     * <p>
     * 输入：N = 6, K = 1, W = 10
     * 输出：0.60000
     * 说明：爱丽丝得到一张卡，然后停止。
     * 在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
     * <p>
     * 输入：N = 21, K = 17, W = 10
     * 输出：0.73278
     * <p>
     * 0 <= K <= N <= 10000
     * 1 <= W <= 10000
     * 如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
     * 此问题的判断限制时间已经减少
     *
     * @param N
     * @param K
     * @param W
     * @return
     */
    public double new21Game(int N, int K, int W) {
        if (K == 0) {
            return 1.0;
        }
        // K-1时再抽一次W, 最大能到K+W-1。
        double[] dp = new double[K + W];

        // 已经到了K分了, 所以i >= K的概率都是1
        for (int i = K; i <= N && i < K + W; i++) {
            dp[i] = 1.0;
        }
        // K-1时，抽一次后肯定爆了或达到目标K
        // => 【K-1+W <= N】时就不管抽几都在[K,N]肯定达到目标K概率就是1,之所以Math.min因为概率最大为1.0
        //     否则就是 (N-(K-1))/W
        //     eg:
        //         k=6,N=10,w=8,已经k-1=5分时抽到[1,5]赢，[6-8]输, 概率即(10-5)/8。
        dp[K - 1] = 1.0 * Math.min(N - K + 1, W) / W;

        /**
         * 当前小于K-1时，ps: 因为K-1时dp[i+W+1]可能会数组越界, 所以上一步提前算
         *
         * 每次能赢的概率等于后面W步能赢的概率之和/W
         * => dp[i] = (dp[i+1]+dp[i+2]+...+dp[i+W]) / W
         *    dp[i+1] = (dp[i+2]+dp[i+3]+...+dp[i+W+1]) / W
         *    两式相减
         * => dp[i] - dp[i+1] = (dp[i+1]-dp[i+W+1]) / W
         * => dp[i] = dp[i+1] + (dp[i+1]-dp[i+W+1]) / W
         * => 到这就够了，再加减交换下就是题解
         */
        for (int i = K - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + (dp[i + 1] - dp[i + W + 1]) / W;
        }
        return dp[0]; // 即还未开始时候去抽，能赢的概率
    }
}
